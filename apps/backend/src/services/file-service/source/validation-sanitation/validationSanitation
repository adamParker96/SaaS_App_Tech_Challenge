const Joi = require('joi');

// Validation schema for file creation (upload)
const createFileSchema = Joi.object({
  filename: Joi.string().trim().min(1).max(255).required(),
  mime_type: Joi.string().trim().min(1).max(100).required(),
  url: Joi.string().uri().required(),
  uploaded_by: Joi.string().trim().min(1).required(), // assuming this is a user ID or username
});

// Validation schema for file update
const updateFileSchema = Joi.object({
  filename: Joi.string().trim().min(1).max(255).optional(),
  mime_type: Joi.string().trim().min(1).max(100).optional(),
  url: Joi.string().uri().optional(),
}).min(1); // require at least one field to update

// Middleware generator for validation
function validateBody(schema) {
  return (req, res, next) => {
    const data = req.body;
    const { error, value } = schema.validate(data, { abortEarly: false, stripUnknown: true });
    if (error) {
      return res.status(400).json({
        message: "Validation failed",
        details: error.details.map((d) => d.message),
      });
    }
    req.body = value; // sanitized value
    next();
  };
}

module.exports = {
  validateCreateFile: validateBody(createFileSchema),
  validateUpdateFile: validateBody(updateFileSchema),
};
